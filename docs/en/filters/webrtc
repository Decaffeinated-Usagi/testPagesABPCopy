<!DOCTYPE html>
<html>
  
  <head>
  <title>WebRTC - ABP Test Pages</title>
  <link rel="stylesheet" href="/css/testpages.css?3062665026">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/abp-32.png?3062665026">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  
  <script src="/lib/utils.js?2476179037"></script>
</head>
  <body>
    <header id="site-header">
  <a href="/"><h1>ABP Test Pages</h1></a>
</header>

    
    <section class="site-panel">
      <h2>WebRTC</h2>
      <p>Check that a filter using the $webrtc filter option is working as expected.</p>
    </section>
    

    





<section id="webrtc-section" class="testcase-panel">
  <h2 aria-label="test-case-webrtc" id="webrtc">WebRTC</h2>
  <p>Test that a filter using the $webrtc filter option works on to block a webrtc connection.</p>
  <div id="webrtc-area" class="testcase-area">
    <div id="testcase-status" class="testcase-trigger">Triggering WebRTC connection...</div>
    <div class="testcase-expected-view">Passed. Connection was blocked.</div>
  </div>
  <h3>Steps</h3>
  <ul class="testcase-steps">
    <li>Add filter #1.</li>
    <li>Refresh page.</li>
    <li>The connection should be blocked and its state indicated in the test case above.</li>
  </ul>
  <h3>Filters</h3>
  <ul id="webrtc-filters" class="testcase-filters">
    <li><pre>$webrtc,domain=testpages.adblockplus.org</pre></li>
  </ul>
</section>

<script>
  "use strict";

  function check(connection) {
    let result = document.getElementById("testcase-status");
    // If blocked by ABP, the signalingState is quickly set to "closed".
    // When not blocked by ABP, the signalingState stays as "stable" for a while.
    if (connection.signalingState === "closed") {
      result.innerHTML = "Passed. Connection was blocked.";
      result.setAttribute("data-expectedresult", "pass");
    }
    else {
      result.innerHTML = "Failed. Connection was NOT blocked.";
      result.setAttribute("data-expectedresult", "fail");
    }
  }

  function doTest() {
    if (typeof RTCPeerConnection == "undefined") {
      if (typeof webkitRTCPeerConnection == "undefined") {
        let output = document.getElementById("testcase-status");
        output.innerHTML = "This test case is not supported in this browser.";
        return;
      }
      RTCPeerConnection = webkitRTCPeerConnection; // eslint-disable-line no-global-assign, no-undef
    }

    let connection = new RTCPeerConnection({iceServers: [{urls: ["stun:example.com"]}]});
    setTimeout(() => check(connection), 500);
  }

  doTest();
</script>

    <footer id="site-footer">
  <p id="site-update">Last deploy: 26 June 2023</p>
</footer>
  </body>
</html>